#+title: Langage C
#+description: ST2CSE
#+author: remi.griot@efrei.fr
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil
#+LINK_UP: 
#+LINK_HOME: index.html

Cette page sur le langage C est loin d'être exhaustive, 
mais permet certainement de faire
un rappel sur des choses à savoir.
Il peut être interessant si vous n'avez jamais fait de C de monter en compétence
dans un premier temps sur votre propre ordinateur avant de vous lancer dans la programmation 
d'un micro controller.

* Installer un environnement Linux sous Windows
Linux est un système d'exploitation très utilisé pour le développement.
Si vous êtes peu famillier avec cet environnement et si vous êtes sous windows10
ou ultérieur, je vous conseille d'installer WSL2 (Windows Subsystem For Linux). \\
https://learn.microsoft.com/fr-fr/windows/wsl/install \\
Une fois cette fonctionnalité vous permettra ensuite d'installer une distribution linux,
je vous conseille Ubuntu, qui est disponible dans le Windows store. \\

Une fois sous Ubuntu, vous pourrez installer GCC qui est un compilateur C trés utilisé.
#+begin_src bash 
sudo apt install gcc
#+end_src

* Utiliser un compilateur en ligne
La façon la plus directe de commencer à s'exercer, sans rien installer. \\

#+ATTR_HTML: :target _blank
https://www.onlinegdb.com/


* Commentaires

#+begin_src C++ :includes <stdio.h>
// Commentaires sur une ligne, peut s'insérer après une instruction
  
/*
Bloc de commentaires 
multi-lignes
*/
#+end_src

* Instructions

Une instruction en C se termine par un point virgule.

** Variables


Les noms de variables utiliséess en C doivent obligatoirement commencer 
par une lettre ou un underscore.
*Attention, ce langage est sensible à la casse!*

*** Types

#+begin_src C++ :includes <stdio.h>
int ivar=4;
float fvar=3.1415;
char cvar='a';
#+end_src

*** Types énumérés
Ces types permettent à l'utilisateur de créer un type de variable et d'en définir les 
différents états. Nous nous en servirons pour les machines à états.
#+begin_src C++ :includes <stdio.h>
enum tricolore{vert, orange, rouge};
enum tricolore feu;
feu = orange; 
#+end_src

** Opérations arithmétique
Les opérations arithémtiques peuvent être réalisée entre des types différents, 
mais votre compilateur fera certainement un choix à votre place, et peut être pas celui que vous attendez...
Privilégiez donc les opérations entre des opérandes de même type.
#+begin_src C++ :includes <stdio.h>
int result;
result = i+f;
result = i*f;
result = i/f;
result = i%f;
#+end_src

* Structures de controle
Les structures de contrôles  utilisent des conditions booléennes évalués entre parenthèses.
Si la condtion booléenne renvoit un résultat différent de 0, elle est considérée valide. Alors les instructions
entre accolades sont executées.

** Conditions
#+begin_src C++ :includes <stdio.h>
if(a==b){
}
else if(a<b){
}
else if(a>b){
}

#+end_src

Une structure un peu particulière, et qui nous sera trés utile pour faire une machine à état

#+begin_src C++ :includes <stdio.h>
switch ( expression ) {
    case value1:
        statement;
        [statement]...
        break;
    case value2:
        statement;
        [statement]...
        break;
    default:
        statement;
        [statement]...
}

#+end_src

** Boucles
#+begin_src C++ :includes <stdio.h>
for(int i=0;i<10;i++){
}
#+end_src

#+begin_src C++ :includes <stdio.h>
while(a<b){
}
#+end_src

* Compilation
#+attr_html: :width 300px
[[./img/compilationprocess.png]]

* Directive pre-processeur
La compilation permet de passer du code source au code machine, ou code assembleur.
Une étape précède cependant la compilation. Cette étape est le pre-processeur.
Il existe dans le code source des directives pour le pre-processeur, elles commencent par un #.
Le pre processeur est entre autre en charge de vérifier la syntaxe et de créer un fichier unique avant la compilation à proporement parler.
*Dans le fichier sortant de l'étape de pre-processing, toutes les directives de pre-processing ont été remplacées par leur valeure originale.*


** Inclure un fichier header
#+begin_src C++ :includes <stdio.h>
#include "definition.h"
#+end_src

La ligne précédente sera donc remplacée par le contenu du fichier definition.h

** Définir une chaine de caractère
#+begin_src C++ :includes <stdio.h>
#define MAXVALUE 100
#+end_src

La chaine de caractère MAXVALUE sera remplacé par 100

*Pour des raisons de lisibilité et de maintenabilité du code, evitez au maximum d'entrer des valeurs numériques directes, l'utilisation de directives pre-processeur est une façon élégante de remplacer une valeur numérique par
une chaine de caractère explicite, qui aura pour avantages:*
+ *de ne pas consommer de la mémoire (à l'inverse d'une variable)*
+ *de gagner en lisibilité*

** Compilation conditionnelle
#+begin_src C++ :includes <stdio.h>
#define DEBUG 
#ifdef DEBUG 
printf("Version Debug");
#endif
#ifndef DEBUG 
printf("Version Client");
#endif
#+end_src

Un ensemble d'instructions sera compilé ou non selon une condition.
Cela est très utile pour créer plusieurs executable à partir d'un même fichier sources.


* Fonctions
Une fonction est un ensemble d'instruction. Elle peut être définie par l'utilisateur,
ou donnée avec l'environnement de développement.
Elle a:
+ Un type: Le type définie le type de sortie de la fonction.
+ Un nom: Le nom de la fonction vient juste après le type.
+ Des arguments: ce sont les entrées de la fonction, ils sont entre parenthèses et séparés par des virgules.
+ Un ensemble d'instructions qui definisse sont implémentation

Pour utiliser une fonction, il faut au préalable qu'elle soit définit avant d'être appelée.
Par convention, elle est définit par son prototype dans un fichier .h, et implémentée dans un fichier .c.
Attention, en C vous pouvez définir un prototype de fonction, sans que la fonction
en elle même le soit 

** Fonction main

C'est la fonction prinicpale de votre programme et la première à être executée.
Quelque soit la plateforme (embarquée/débarquée) cette fonction est obligatoire en C et C++.
A noter qu'en langage Arduino cette fonction est dissumulée.

** Exemple

Definition et implémentation d'une fonction dans le même fichier

#+begin_src C++ :includes <stdio.h>
#include <stdio.h>

float moyenne(float a, float b){
  return (a+b)/2;
}

void main(){
  printf("La moyenne de 3 et 4 est %f \n",moyenne(3,4));
}
#+end_src


Definition et implémentation d'une fonction sur plusieurs fichiers

*customfunc.c*
Implémentation de la fonction
#+begin_src C++
float moyenne(float a, float b){
  return (a+b)/2;
}
#+end_src

*customfunc.h*
Définition du prototype de la fonction
#+begin_src C++
float moyenne(float a, float b);
#+end_src

*main.c*
Fichier contenant la fonction main()
#+begin_src C++ :includes <stdio.h>
#include <stdio.h>
#include "customfunc.h"

void main(){
  printf("La moyenne de 3 et 4 est %f \n",moyenne(3,4));
}
#+end_src

