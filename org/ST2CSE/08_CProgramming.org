#+title: Langage C
#+description: ST2CSE
#+author: remi.griot@efrei.fr
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil
#+LINK_UP: 
#+LINK_HOME: index.html

Cette page sur le langage C est loin d'être exhaustive, 
mais permet certainement de faire
un rappel sur des choses à savoir.
Il peut être interessant si vous n'avez jamais fait de C de monter en compétence
dans un premier temps sur votre propre ordinateur avant de vous lancer dans la programmation 
d'un micro controller.
# Faire un code qui fonctionne et qui est stable c'est déjà très bien, mais il est au moins aussi important de faire un code lisible et maintenable. \\

* Installer un environnement Linux sous Windows
Si vous êtes sous windows10 ou ultérieur, je vous conseille d'installer WSL2 (Windows Subsystem For Linux).
Cette fonctionnalité vous permettra ensuite d'installer Ubuntu. 
De là vous pourrez installer GCC qui est un compilateur C très utilisé.

https://learn.microsoft.com/fr-fr/windows/wsl/install



* Commentaires

#+begin_src C++ :includes <stdio.h>
// Commentaires sur une ligne, peut s'insérer après une instruction
  
/*
Bloc de commentaires 
multi-lignes
*/
#+end_src

* Instructions

Une instruction en C se termine par un point virgule.

** Variables

Les noms de variables utilisées en C doivent obligatoirement commencer 
par une lettre ou un underscore.
*Attention, ce langage est sensible à la casse!*

*** Types

#+begin_src C++ :includes <stdio.h>
int ivar=4;
float fvar=3.1415;
char cvar='a';
#+end_src

*** Types énuméré
Ces types permettent à l'utilisateur de créer un type de variable et d'en définir les 
différents états. Nous nous en servirons pour les machines à états.
#+begin_src C++ :includes <stdio.h>
enum tricolore{vert, orange, rouge};
enum tricolore feu;
feu = orange; 
#+end_src




** Opérations arithmétique
Les oprérations arithémtiques peuvent être réalisé entre des types différents, 
mais votre compilateur fera certainement un choix à votre place, et peut être pas celui que vous attendez...
#+begin_src C++ :includes <stdio.h>
int result;
result = i+f;
result = i*f;
result = i/f;
result = i%f;
#+end_src

* Structures de controle
Les structures de contrôles  utilisent des conditions booléennes évalués entre parenthèses.
Si la condtion booléenne renvoit un résultat différent de 0, elle est considéré valide. Alors les instructions
placés entre accolades sont executés.

** Conditions
#+begin_src C++ :includes <stdio.h>
if(a==b){
}
else if(a<b){
}
else if(a>b){
}

#+end_src

Une structure un peu particulière, et qui nous sera très utile pour faire une machine à état

#+begin_src C++ :includes <stdio.h>
switch ( expression ) {
    case value1:
        statement;
        [statement]...
        break;
    case value2:
        statement;
        [statement]...
        break;
    default:
        statement;
        [statement]...
}

#+end_src

** Boucles
#+begin_src C++ :includes <stdio.h>
for(int i=0;i<10;i++){
}
#+end_src

#+begin_src C++ :includes <stdio.h>
while(a<b){
}
#+end_src

* Compilation


* Directive pre-processeur
La compilation permet de passer du code source au code machine, ou code assembleur.
Une étape précède cependant la compilation. Cette étape est le pre-processeur.
Il existe dans le code source des directives pour le pre-processeur, elles commencent par un #.
Le pre processeur est entre autre en charge de vérifier la syntaxe et de créer un fichier avant la compilation à proporement parlé.
*Dans le fichier sortant de l'étape de pre-processing, toutes les directives de pre-processing ont été remplacées par leur valeure originale.*


** Inclure un fichier header
#+begin_src C++ :includes <stdio.h>
#include "definition.h"
#+end_src

La ligne précédente sera donc remplacée par le contenu du fichier definition.h

** Définir une chaine de caractère
#+begin_src C++ :includes <stdio.h>
#define MAXVALUE 100
#+end_src

La chaine de caractère MAXVALUE sera remplacé par 100

*Pour des raisons de lisibilité et de maintenabilité du code, 
evitez au maximum d'entrer des valeurs numériques directes, l'utilisation de directives pre-processeur est une façon élégante de le faire*

** Compilation conditionnelle
#+begin_src C++ :includes <stdio.h>
#define DEBUG 
#ifdef DEBUG 
printf("Version Debug");
#endif
#ifndef DEBUG 
printf("Version Client");
#endif
#+end_src

Un ensemble d'instructions sera compilé ou non selon une condition.
Cela est très utile pour créer plusieurs executable à partir d'un même fichier sources.


* Fonctions
Une fonction est un ensemble d'instruction. Elle peut être définie par l'utilisateur,
ou donnée avec l'environnement de développement.
Elle a:
+ Un type
+ Un nom
+ Des arguments
+ Un ensemble d'instruction qui la définie


Le type définie le type de sortie de la fonction.
Le nom de la fonction vien juste après le type.
Les arguments sont considérées comme les entrées de la fonction, ils sont entre parenthèses et séparé par des virgules.
Pour finir, les instructions correspondant à la fonction sont entre accolades.
Pour utiliser une fonction, il faut au préalable qu'elle soit définit.
Attention, en C vous pouvez définir un prototype de fonction, sans que la fonction
en elle même soit 

** Exemple

#+begin_src C++ :includes <stdio.h>
#include <stdio.h>

float moyenne(float a, float b){
  return (a+b)/2;
}

void main(){
  printf("La moyenne de 3 et 4 est %f \n",moyenne(3,4));
}
#+end_src

#+results:
