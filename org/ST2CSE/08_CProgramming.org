#+title: Langage C
#+description: ST2CSE
#+author: remi.griot@efrei.fr
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil
#+LINK_UP: 
#+LINK_HOME: index.html

Cette page sur le langage C est loin d'Ãªtre exhaustive, 
mais permet certainement de faire
un rappel sur des choses à savoir.
Il peut Ãªtre interessant si vous n'avez jamais fait de C de monter en compÃ©tence
dans un premier temps sur votre propre ordinateur avant de vous lancer dans la programmation 
d'un micro controller.
<<<<<<< HEAD
# Faire un code qui fonctionne et qui est stable c'est déjà trés bien, mais il est au moins aussi important de faire un code lisible et maintenable. \\

* Installer un environnement Linux sous Windows
Si vous Ãªtes sous windows10 ou ultÃ©rieur, je vous conseille d'installer WSL2 (Windows Subsystem For Linux).
Cette fonctionnalitÃ© vous permettra ensuite d'installer Ubuntu. 
De lÀ vous pourrez installer GCC qui est un compilateur C trÃ¨s utilisÃ©.
=======
# Faire un code qui fonctionne et qui est stable c'est dÃ©jÃ  trÃ¨s bien, mais il est au moins aussi important de faire un code lisible et maintenable. \\

* Installer un environnement Linux sous Windows
Linux est un système d'exploitation très utilisé pour le développement.
Si vous êtes peu famillier avec cet environnement et si vous êtes sous windows10
ou ultérieur, je vous conseille d'installer WSL2 (Windows Subsystem For Linux). \\
https://learn.microsoft.com/fr-fr/windows/wsl/install \\
Une fois cette fonctionnalité vous permettra ensuite d'installer une distribution linux,
je vous conseille Ubuntu, qui est disponible dans le Windows store. \\
>>>>>>> refs/remotes/origin/master

Une fois sous Ubuntu, vous pourrez installer GCC qui est un compilateur C trés utilisé.
#+begin_src bash 
sudo apt install gcc
#+end_src



* Commentaires

#+begin_src C++ :includes <stdio.h>
// Commentaires sur une ligne, peut s'insÃ©rer aprÃ¨s une instruction
  
/*
Bloc de commentaires 
multi-lignes
*/
#+end_src

* Instructions

Une instruction en C se termine par un point virgule.

** Variables

<<<<<<< HEAD
Les noms de variables utilisÃ©es en C doivent obligatoirement commencer 
=======
Les noms de variables utiliséss en C doivent obligatoirement commencer 
>>>>>>> refs/remotes/origin/master
par une lettre ou un underscore.
*Attention, ce langage est sensible Ã  la casse!*

*** Types

#+begin_src C++ :includes <stdio.h>
int ivar=4;
float fvar=3.1415;
char cvar='a';
#+end_src

*** Types Ã©numÃ©rÃ©
Ces types permettent Ã  l'utilisateur de crÃ©er un type de variable et d'en dÃ©finir les 
diffÃ©rents Ã©tats. Nous nous en servirons pour les machines Ã  Ã©tats.
#+begin_src C++ :includes <stdio.h>
enum tricolore{vert, orange, rouge};
enum tricolore feu;
feu = orange; 
#+end_src




<<<<<<< HEAD
** Opérations arithmétique
=======
** OpÃ©rations arithmÃ©tique
>>>>>>> refs/remotes/origin/master
Les oprÃ©rations arithÃ©mtiques peuvent Ãªtre rÃ©alisÃ© entre des types diffÃ©rents, 
mais votre compilateur fera certainement un choix Ã  votre place, et peut Ãªtre pas celui que vous attendez...
#+begin_src C++ :includes <stdio.h>
int result;
result = i+f;
result = i*f;
result = i/f;
result = i%f;
#+end_src

* Structures de controle
Les structures de contrÃ´les  utilisent des conditions boolÃ©ennes Ã©valuÃ©s entre parenthÃ¨ses.
Si la condtion boolÃ©enne renvoit un rÃ©sultat diffÃ©rent de 0, elle est considÃ©rÃ© valide. Alors les instructions
placÃ©s entre accolades sont executÃ©s.

** Conditions
#+begin_src C++ :includes <stdio.h>
if(a==b){
}
else if(a<b){
}
else if(a>b){
}

#+end_src

Une structure un peu particuliÃ¨re, et qui nous sera trÃ¨s utile pour faire une machine Ã  Ã©tat

#+begin_src C++ :includes <stdio.h>
switch ( expression ) {
    case value1:
        statement;
        [statement]...
        break;
    case value2:
        statement;
        [statement]...
        break;
    default:
        statement;
        [statement]...
}

#+end_src

** Boucles
#+begin_src C++ :includes <stdio.h>
for(int i=0;i<10;i++){
}
#+end_src

#+begin_src C++ :includes <stdio.h>
while(a<b){
}
#+end_src

* Compilation


* Directive pre-processeur
La compilation permet de passer du code source au code machine, ou code assembleur.
Une Ã©tape prÃ©cÃ¨de cependant la compilation. Cette Ã©tape est le pre-processeur.
Il existe dans le code source des directives pour le pre-processeur, elles commencent par un #.
Le pre processeur est entre autre en charge de vÃ©rifier la syntaxe et de crÃ©er un fichier avant la compilation Ã  proporement parlÃ©.
*Dans le fichier sortant de l'Ã©tape de pre-processing, toutes les directives de pre-processing ont Ã©tÃ© remplacÃ©es par leur valeure originale.*


** Inclure un fichier header
#+begin_src C++ :includes <stdio.h>
#include "definition.h"
#+end_src

La ligne prÃ©cÃ©dente sera donc remplacÃ©e par le contenu du fichier definition.h

** DÃ©finir une chaine de caractÃ¨re
#+begin_src C++ :includes <stdio.h>
#define MAXVALUE 100
#+end_src

La chaine de caractÃ¨re MAXVALUE sera remplacÃ© par 100

*Pour des raisons de lisibilitÃ© et de maintenabilitÃ© du code, 
evitez au maximum d'entrer des valeurs numÃ©riques directes, l'utilisation de directives pre-processeur est une faÃ§on Ã©lÃ©gante de le faire*

** Compilation conditionnelle
#+begin_src C++ :includes <stdio.h>
#define DEBUG 
#ifdef DEBUG 
printf("Version Debug");
#endif
#ifndef DEBUG 
printf("Version Client");
#endif
#+end_src

Un ensemble d'instructions sera compilÃ© ou non selon une condition.
Cela est trÃ¨s utile pour crÃ©er plusieurs executable Ã  partir d'un mÃªme fichier sources.


* Fonctions
Une fonction est un ensemble d'instruction. Elle peut Ãªtre dÃ©finie par l'utilisateur,
ou donnÃ©e avec l'environnement de dÃ©veloppement.
Elle a:
+ Un type
+ Un nom
+ Des arguments
<<<<<<< HEAD
+ Un ensemble d'instruction qui la définisse

Le type définie le type de sortie de la fonction.
Le nom de la fonction vient juste après le type.
Les arguments sont considérés comme les entrées de la fonction, ils sont entre parenthÃ¨ses et sÃ©parÃ© par des virgules.
Pour finir, les instructions correspondant à la fonction sont entre accolades.
Pour utiliser une fonction, il faut au prÃ©alable qu'elle soit définit.
Attention, en C vous pouvez dÃ©finir un prototype de fonction, sans que la fonction
en elle mÃªme soit 

** Fonction main

C'est la fonction prinicpale de votre programme et la première à être executée.
Quelque soit la plateforme (embarqué/débarqué) cette fonction est obligatoire en C et C++.
A noter qu'en langage Arduino cette fonction est dissumulée.

=======
+ Un ensemble d'instruction qui la dÃ©finie


Le type dÃ©finie le type de sortie de la fonction.
Le nom de la fonction vien juste aprÃ¨s le type.
Les arguments sont considÃ©rÃ©es comme les entrÃ©es de la fonction, ils sont entre parenthÃ¨ses et sÃ©parÃ© par des virgules.
Pour finir, les instructions correspondant Ã  la fonction sont entre accolades.
Pour utiliser une fonction, il faut au prÃ©alable qu'elle soit dÃ©finit.
Attention, en C vous pouvez dÃ©finir un prototype de fonction, sans que la fonction
en elle mÃªme soit 
>>>>>>> refs/remotes/origin/master

** Exemple

#+begin_src C++ :includes <stdio.h>
#include <stdio.h>

float moyenne(float a, float b){
  return (a+b)/2;
}

void main(){
  printf("La moyenne de 3 et 4 est %f \n",moyenne(3,4));
}
#+end_src

#+results:
